var lat = [     83.5,
  83.446,
 83.3916,
 83.3368,
 83.2815,
 83.2257,
 83.1695,
 83.1128,
 83.0557,
  82.998,
 82.9399,
 82.8814,
 82.8223,
 82.7627,
 82.7027,
 82.6422,
 82.5811,
 82.5196,
 82.4575,
  82.395,
 82.3319,
 82.2683,
 82.2042,
 82.1395,
 82.0743,
 82.0086,
 81.9424,
 81.8756,
 81.8082,
 81.7403,
 81.6718,
 81.6028,
 81.5332,
  81.463,
 81.3923,
 81.3209,
  81.249,
 81.1765,
 81.1034,
 81.0297,
 80.9554,
 80.8804,
 80.8049,
 80.7287,
 80.6519,
 80.5745,
 80.4965,
 80.4178,
 80.3385,
 80.2585,
 80.1778,
 80.0965,
 80.0145,
 79.9319,
 79.8486,
 79.7646,
 79.6799,
 79.5945,
 79.5084,
 79.4216,
 79.3342,
 79.2459,
  79.157,
 79.0674,
  78.977,
 78.8858,
  78.794,
 78.7014,
  78.608,
 78.5138,
 78.4189,
 78.3233,
 78.2268,
 78.1296,
 78.0315,
 77.9327,
 77.8331,
 77.7326,
 77.6313,
 77.5293,
 77.4263,
 77.3226,
  77.218,
 77.1126,
 77.0063,
 76.8991,
 76.7911,
 76.6822,
 76.5724,
 76.4617,
 76.3502,
 76.2377,
 76.1243,
   76.01,
 75.8948,
 75.7787,
 75.6616,
 75.5436,
 75.4246,
 75.3047,
 75.1838,
 75.0619,
 74.9391,
 74.8152,
 74.6904,
 74.5646,
 74.4377,
 74.3099,
  74.181,
 74.0511,
 73.9201,
 73.7882,
 73.6551,
  73.521,
 73.3858,
 73.2496,
 73.1122,
 72.9738,
 72.8342,
 72.6936,
 72.5518,
 72.4089,
 72.2649,
 72.1198,
 71.9734,
  71.826,
 71.6773,
 71.5275,
 71.3766,
 71.2244,
  71.071,
 70.9164,
 70.7606,
 70.6036,
 70.4453,
 70.2858,
 70.1251,
 69.9631,
 69.7998,
 69.6353,
 69.4695,
 69.3024,
 69.1339,
 68.9642,
 68.7932,
 68.6208,
 68.4471,
 68.2721,
 68.0957,
 67.9179,
 67.7388,
 67.5583,
 67.3764,
 67.1931,
 67.0084,
 66.8223,
 66.6348,
 66.4458,
 66.2554,
 66.0635,
 65.8702,
 65.6754,
 65.4792,
 65.2815,
 65.0822,
 64.8815,
 64.6792,
 64.4755,
 64.2702,
 64.0633,
  63.855,
  63.645,
 63.4335,
 63.2204,
 63.0058,
 62.7895,
 62.5717,
 62.3522,
 62.1312,
 61.9085,
 61.6842,
 61.4582,
 61.2306,
 61.0013,
 60.7703,
 60.5377,
 60.3034,
 60.0674,
 59.8297,
 59.5903,
 59.3492,
 59.1063,
 58.8618,
 58.6154,
 58.3674,
 58.1175,
 57.8659,
 57.6126,
 57.3574,
 57.1005,
 56.8418,
 56.5813,
  56.319,
 56.0548,
 55.7889,
 55.5211,
 55.2514,
   54.98,
 54.7067,
 54.4315,
 54.1545,
 53.8756,
 53.5948,
 53.3121,
 53.0276,
 52.7412,
 52.4529,
 52.1626,
 51.8705,
 51.5765,
 51.2806,
 50.9827,
 50.6829,
 50.3812,
 50.0775,
  49.772,
 49.4644,
  49.155,
 48.8436,
 48.5302,
 48.2149,
 47.8976,
 47.5784,
 47.2572,
 46.9341,
  46.609,
 46.2819,
 45.9529,
 45.6219,
  45.289,
  44.954,
 44.6171,
 44.2783,
 43.9375,
 43.5947,
 43.2499,
 42.9032,
 42.5546,
 42.2039,
 41.8513,
 41.4968,
 41.1403,
 40.7819,
 40.4215,
 40.0591,
 39.6949,
 39.3287,
 38.9606,
 38.5905,
 38.2185,
 37.8447,
 37.4689,
 37.0912,
 36.7116,
 36.3302,
 35.9468,
 35.5616,
 35.1746,
 34.7857,
 34.3949,
 34.0023,
 33.6079,
 33.2117,
 32.8137,
 32.4138,
 32.0123,
 31.6089,
 31.2038,
 30.7969,
 30.3883,
  29.978,
  29.566,
 29.1523,
 28.7369,
 28.3199,
 27.9012,
 27.4809,
  27.059,
 26.6355,
 26.2105,
 25.7838,
 25.3557,
  24.926,
 24.4948,
 24.0621,
 23.6279,
 23.1924,
 22.7553,
 22.3169,
 21.8771,
  21.436,
 20.9935,
 20.5497,
 20.1046,
 19.6582,
 19.2106,
 18.7618,
 18.3117,
 17.8605,
 17.4082,
 16.9547,
 16.5001,
 16.0445,
 15.5878,
 15.1301,
 14.6714,
 14.2117,
 13.7511,
 13.2896,
 12.8272,
  12.364,
 11.8999,
 11.4351,
 10.9694,
 10.5031,
  10.036,
  9.5683,
  9.0999,
  8.6309,
  8.1614,
  7.6912,
  7.2206,
  6.7495,
  6.2779,
  5.8058,
  5.3334,
  4.8606,
  4.3875,
  3.9141,
  3.4404,
  2.9665,
  2.4924,
  2.0181,
  1.5436,
  1.0691,
  0.5945,
  0.1198,
 -0.3548,
 -0.8294,
  -1.304,
 -1.7785,
 -2.2529,
 -2.7271,
 -3.2011,
 -3.6749,
 -4.1485,
 -4.6217,
 -5.0947,
 -5.5673,
 -6.0395,
 -6.5114,
 -6.9827,
 -7.4536,
  -7.924,
 -8.3939,
 -8.8632,
 -9.3319,
 -9.7999,
-10.2673,
 -10.734,
   -11.2,
-11.6653,
-12.1297,
-12.5934,
-13.0562,
-13.5182,
-13.9792,
-14.4394,
-14.8985,
-15.3568,
 -15.814,
-16.2701,
-16.7253,
-17.1793,
-17.6322,
 -18.084,
-18.5346,
-18.9841,
-19.4323,
-19.8793,
-20.3251,
-20.7695,
-21.2127,
-21.6545,
 -22.095,
-22.5341,
-22.9718,
-23.4082,
 -23.843,
-24.2765,
-24.7084,
-25.1389,
-25.5678,
-25.9952,
-26.4211,
-26.8454,
-27.2681,
-27.6892,
-28.1087,
-28.5265,
-28.9428,
-29.3573,
-29.7702,
-30.1813,
-30.5908,
-30.9985,
-31.4045,
-31.8088,
-32.2113,
 -32.612,
-33.0109,
-33.4081,
-33.8034,
-34.1969,
-34.5886,
-34.9784,
-35.3664,
-35.7526,
-36.1368,
-36.5192,
-36.8998,
-37.2784,
-37.6551,
  -38.03,
-38.4029,
-38.7739,
 -39.143,
-39.5102,
-39.8754,
-40.2387,
-40.6001,
-40.9595,
 -41.317,
-41.6725,
-42.0261,
-42.3777,
-42.7274,
-43.0751,
-43.4208,
-43.7646,
-44.1064,
-44.4463,
-44.7842,
-45.1201,
 -45.454,
 -45.786,
 -46.116,
-46.4441,
-46.7702,
-47.0943,
-47.4165,
-47.7367,
-48.0549,
-48.3712,
-48.6856,
 -48.998,
-49.3084,
-49.6169,
-49.9235,
-50.2281,
-50.5308,
-50.8315,
-51.1304,
-51.4273,
-51.7223,
-52.0154,
-52.3065,
-52.5958,
-52.8832,
-53.1687,
-53.4523,
 -53.734,
-54.0138,
-54.2918,
-54.5679,
-54.8422,
-55.1146,
-55.3851,
-55.6539,
-55.9207,
-56.1858,
 -56.449,
-56.7105,
-56.9701,
-57.2279,
 -57.484,
-57.7382,
-57.9907,
-58.2414,
-58.4904,
-58.7376,
 -58.983,
-59.2268,
-59.4688,
 -59.709,
-59.9476,
-60.1844,
-60.4196,
-60.6531,
-60.8849,
 -61.115,
-61.3434,
-61.5702,
-61.7954,
-62.0189,
-62.2408,
-62.4611,
-62.6797,
-62.8968,
-63.1122,
-63.3261,
-63.5384,
-63.7491,
-63.9583,
-64.1659,];

var lon = [171,
 171.475,
  171.95,
 172.425,
   172.9,
 173.375,
  173.85,
 174.325,
   174.8,
 175.275,
  175.75,
 176.225,
   176.7,
 177.175,
  177.65,
 178.125,
   178.6,
 179.075,
  179.55,
-179.975,
  -179.5,
-179.025,
 -178.55,
-178.075,
  -177.6,
-177.125,
 -176.65,
-176.175,
  -175.7,
-175.225,
 -174.75,
-174.275,
  -173.8,
-173.325,
 -172.85,
-172.375,
  -171.9,
-171.425,
 -170.95,
-170.475,
    -170,
-169.525,
 -169.05,
-168.575,
  -168.1,
-167.625,
 -167.15,
-166.675,
  -166.2,
-165.725,
 -165.25,
-164.775,
  -164.3,
-163.825,
 -163.35,
-162.875,
  -162.4,
-161.925,
 -161.45,
-160.975,
  -160.5,
-160.025,
 -159.55,
-159.075,
  -158.6,
-158.125,
 -157.65,
-157.175,
  -156.7,
-156.225,
 -155.75,
-155.275,
  -154.8,
-154.325,
 -153.85,
-153.375,
  -152.9,
-152.425,
 -151.95,
-151.475,
    -151,
-150.525,
 -150.05,
-149.575,
  -149.1,
-148.625,
 -148.15,
-147.675,
  -147.2,
-146.725,
 -146.25,
-145.775,
  -145.3,
-144.825,
 -144.35,
-143.875,
  -143.4,
-142.925,
 -142.45,
-141.975,
  -141.5,
-141.025,
 -140.55,
-140.075,
  -139.6,
-139.125,
 -138.65,
-138.175,
  -137.7,
-137.225,
 -136.75,
-136.275,
  -135.8,
-135.325,
 -134.85,
-134.375,
  -133.9,
-133.425,
 -132.95,
-132.475,
    -132,
-131.525,
 -131.05,
-130.575,
  -130.1,
-129.625,
 -129.15,
-128.675,
  -128.2,
-127.725,
 -127.25,
-126.775,
  -126.3,
-125.825,
 -125.35,
-124.875,
  -124.4,
-123.925,
 -123.45,
-122.975,
  -122.5,
-122.025,
 -121.55,
-121.075,
  -120.6,
-120.125,
 -119.65,
-119.175,
  -118.7,
-118.225,
 -117.75,
-117.275,
  -116.8,
-116.325,
 -115.85,
-115.375,
  -114.9,
-114.425,
 -113.95,
-113.475,
    -113,
-112.525,
 -112.05,
-111.575,
  -111.1,
-110.625,
 -110.15,
-109.675,
  -109.2,
-108.725,
 -108.25,
-107.775,
  -107.3,
-106.825,
 -106.35,
-105.875,
  -105.4,
-104.925,
 -104.45,
-103.975,
  -103.5,
-103.025,
 -102.55,
-102.075,
  -101.6,
-101.125,
 -100.65,
-100.175,
   -99.7,
 -99.225,
  -98.75,
 -98.275,
   -97.8,
 -97.325,
  -96.85,
 -96.375,
   -95.9,
 -95.425,
  -94.95,
 -94.475,
     -94,
 -93.525,
  -93.05,
 -92.575,
   -92.1,
 -91.625,
  -91.15,
 -90.675,
   -90.2,
 -89.725,
  -89.25,
 -88.775,
   -88.3,
 -87.825,
  -87.35,
 -86.875,
   -86.4,
 -85.925,
  -85.45,
 -84.975,
   -84.5,
 -84.025,
  -83.55,
 -83.075,
   -82.6,
 -82.125,
  -81.65,
 -81.175,
   -80.7,
 -80.225,
  -79.75,
 -79.275,
   -78.8,
 -78.325,
  -77.85,
 -77.375,
   -76.9,
 -76.425,
  -75.95,
 -75.475,
     -75,
 -74.525,
  -74.05,
 -73.575,
   -73.1,
 -72.625,
  -72.15,
 -71.675,
   -71.2,
 -70.725,
  -70.25,
 -69.775,
   -69.3,
 -68.825,
  -68.35,
 -67.875,
   -67.4,
 -66.925,
  -66.45,
 -65.975,
   -65.5,
 -65.025,
  -64.55,
 -64.075,
   -63.6,
 -63.125,
  -62.65,
 -62.175,
   -61.7,
 -61.225,
  -60.75,
 -60.275,
   -59.8,
 -59.325,
  -58.85,
 -58.375,
   -57.9,
 -57.425,
  -56.95,
 -56.475,
     -56,
 -55.525,
  -55.05,
 -54.575,
   -54.1,
 -53.625,
  -53.15,
 -52.675,
   -52.2,
 -51.725,
  -51.25,
 -50.775,
   -50.3,
 -49.825,
  -49.35,
 -48.875,
   -48.4,
 -47.925,
  -47.45,
 -46.975,
   -46.5,
 -46.025,
  -45.55,
 -45.075,
   -44.6,
 -44.125,
  -43.65,
 -43.175,
   -42.7,
 -42.225,
  -41.75,
 -41.275,
   -40.8,
 -40.325,
  -39.85,
 -39.375,
   -38.9,
 -38.425,
  -37.95,
 -37.475,
     -37,
 -36.525,
  -36.05,
 -35.575,
   -35.1,
 -34.625,
  -34.15,
 -33.675,
   -33.2,
 -32.725,
  -32.25,
 -31.775,
   -31.3,
 -30.825,
  -30.35,
 -29.875,
   -29.4,
 -28.925,
  -28.45,
 -27.975,
   -27.5,
 -27.025,
  -26.55,
 -26.075,
   -25.6,
 -25.125,
  -24.65,
 -24.175,
   -23.7,
 -23.225,
  -22.75,
 -22.275,
   -21.8,
 -21.325,
  -20.85,
 -20.375,
   -19.9,
 -19.425,
  -18.95,
 -18.475,
     -18,
 -17.525,
  -17.05,
 -16.575,
   -16.1,
 -15.625,
  -15.15,
 -14.675,
   -14.2,
 -13.725,
  -13.25,
 -12.775,
   -12.3,
 -11.825,
  -11.35,
 -10.875,
   -10.4,
  -9.925,
   -9.45,
  -8.975,
    -8.5,
  -8.025,
   -7.55,
  -7.075,
    -6.6,
  -6.125,
   -5.65,
  -5.175,
    -4.7,
  -4.225,
   -3.75,
  -3.275,
    -2.8,
  -2.325,
   -1.85,
  -1.375,
    -0.9,
  -0.425,
    0.05,
   0.525,
       1,
   1.475,
    1.95,
   2.425,
     2.9,
   3.375,
    3.85,
   4.325,
     4.8,
   5.275,
    5.75,
   6.225,
     6.7,
   7.175,
    7.65,
   8.125,
     8.6,
   9.075,
    9.55,
  10.025,
    10.5,
  10.975,
   11.45,
  11.925,
    12.4,
  12.875,
   13.35,
  13.825,
    14.3,
  14.775,
   15.25,
  15.725,
    16.2,
  16.675,
   17.15,
  17.625,
    18.1,
  18.575,
   19.05,
  19.525,
      20,
  20.475,
   20.95,
  21.425,
    21.9,
  22.375,
   22.85,
  23.325,
    23.8,
  24.275,
   24.75,
  25.225,
    25.7,
  26.175,
   26.65,
  27.125,
    27.6,
  28.075,
   28.55,
  29.025,
    29.5,
  29.975,
   30.45,
  30.925,
    31.4,
  31.875,
   32.35,
  32.825,
    33.3,
  33.775,
   34.25,
  34.725,
    35.2,
  35.675,
   36.15,
  36.625,
    37.1,
  37.575,
   38.05,
  38.525,
      39,
  39.475,
   39.95,
  40.425,
    40.9,
  41.375,
   41.85,
  42.325,
    42.8,
  43.275,
   43.75,
  44.225,
    44.7,
  45.175,
   45.65,
  46.125,
    46.6,
  47.075,
   47.55,
  48.025,
    48.5,
  48.975,
   49.45,
  49.925,
    50.4,
  50.875,
   51.35,
  51.825,
    52.3,
  52.775,
   53.25,
  53.725,
    54.2,
  54.675,
   55.15,
  55.625,
    56.1,
  56.575,
   57.05,
  57.525,
      58,
  58.475,
   58.95,
  59.425,
    59.9,
  60.375,
   60.85,
  61.325,
    61.8,
  62.275,
   62.75,
  63.225,
    63.7,
  64.175,
   64.65,
  65.125,
    65.6,
  66.075,
   66.55,
  67.025,
    67.5,
  67.975,
   68.45,
  68.925,
    69.4,
  69.875,
   70.35,
  70.825,
    71.3,
  71.775,
   72.25,
  72.725,
    73.2,
  73.675,
   74.15,
  74.625,
    75.1,
  75.575,
   76.05,
  76.525,
      77,
  77.475,
   77.95,
  78.425,
    78.9,
  79.375,
   79.85,
  80.325,
    80.8,
  81.275,
   81.75,
  82.225,
    82.7,
  83.175,
   83.65,
  84.125,
    84.6,
  85.075,
   85.55,
  86.025,
    86.5,
  86.975,
   87.45,
  87.925,
    88.4,
  88.875,
   89.35,
  89.825,
    90.3,
  90.775,
   91.25,
  91.725,
    92.2,
  92.675,
   93.15,
  93.625,
    94.1,
  94.575,
   95.05,
  95.525,
      96,
  96.475,
   96.95,
  97.425,
    97.9,
  98.375,
   98.85,
  99.325,
    99.8,
 100.275,
  100.75,
 101.225,
   101.7,
 102.175,
  102.65,
 103.125,
   103.6,
 104.075,
  104.55,
 105.025,
   105.5,
 105.975,
  106.45,
 106.925,
   107.4,
 107.875,
  108.35,
 108.825,
   109.3,
 109.775,
  110.25,
 110.725,
   111.2,
 111.675,
  112.15,
 112.625,
   113.1,
 113.575,
  114.05,
 114.525,
     115,
 115.475,
  115.95,
 116.425,
   116.9,
 117.375,
  117.85,
 118.325,
   118.8,
 119.275,
  119.75,
 120.225,
   120.7,
 121.175,
  121.65,
 122.125,
   122.6,
 123.075,
  123.55,
 124.025,
   124.5,
 124.975,
  125.45,
 125.925,
   126.4,
 126.875,
  127.35,
 127.825,
   128.3,
 128.775,
  129.25,
 129.725,
   130.2,
 130.675,
  131.15,
 131.625,
   132.1,
 132.575,
  133.05,
 133.525,
     134,
 134.475,
  134.95,
 135.425,
   135.9,
 136.375,
  136.85,
 137.325,
   137.8,
 138.275,
  138.75,
 139.225,
   139.7,
 140.175,
  140.65,
 141.125,
   141.6,
 142.075,
  142.55,
 143.025,
   143.5,
 143.975,
  144.45,
 144.925,
   145.4,
 145.875,
  146.35,
 146.825,
   147.3,
 147.775,
  148.25,
 148.725,
   149.2,
 149.675,
  150.15,
 150.625,
   151.1,
 151.575,
  152.05,
 152.525,
     153,
 153.475,
  153.95,
 154.425,
   154.9,
 155.375,
  155.85,
 156.325,
   156.8,
 157.275,
  157.75,
 158.225,
   158.7,
 159.175,
  159.65,
 160.125,
   160.6,
 161.075,
  161.55,
 162.025,
   162.5,
 162.975,
  163.45,
 163.925,
   164.4,
 164.875,
  165.35,
 165.825,
   166.3,
 166.775,
  167.25,
 167.725,
   168.2,
 168.675,
  169.15,
 169.625,
   170.1,
 170.575,
  171.05,
 171.525,
     172,
 172.475,
  172.95,
 173.425,
   173.9,
 174.375,
  174.85,
 175.325,
   175.8,
 176.275,
  176.75,
 177.225,
   177.7,
 178.175,
  178.65,
 179.125,
   179.6,
-179.925,
 -179.45,
-178.975,
  -178.5,
-178.025,
 -177.55,
-177.075,
  -176.6,
-176.125,
 -175.65,
-175.175,
  -174.7,
-174.225,
 -173.75,
-173.275,
  -172.8,
-172.325,
 -171.85,
-171.375,
  -170.9,
-170.425,
 -169.95,
-169.475];
var cityLatLong=[
  'Denver;38;-104',
  'Dubai;25;55',
  'London;51;0',
  'Moscow;55;37',
  'Paris;48;2',
  'Sydney;-33;151',
  'Rio de Janeiro;-22;-43'
];
function point_it(event){
  pos_a = event.offsetX?(event.offsetX):event.pageX-document.offsetLeft;
  pos_b = event.offsetY?(event.offsetY):event.pageY-document.offsetTop;
  var heightRatio = 1;
  var widthRatio = 1;
  var windowWidth = window.innerWidth;
  if(windowWidth <= 399){
    heightRatio = 800/266;  //3.0075
    widthRatio = 526/175;  //3.0057
  }else if(windowWidth > 399 && windowWidth < 600){
    heightRatio = 800/327;  //2.4464
    widthRatio = 526/215;   //2.4465
  }else if(windowWidth > 599 && windowWidth < 630){
    heightRatio = 800/300;  //2.6666
    widthRatio = 526/197;  //2.6700
  }else if(windowWidth > 629 && windowWidth < 657){
    heightRatio = 800/350;  //2.2857
    widthRatio = 526/230;  //2.2869
  }else if(windowWidth > 656 && windowWidth < 768) {
    heightRatio = 800/400; //2
    widthRatio = 526/264;  //1.9924
  }else if(windowWidth > 767 && windowWidth < 890){
    heightRatio = 800/475; //1.6842
    widthRatio = 526/313;  //1.6805
  }else if(windowWidth > 890 && windowWidth < 1910){
    heightRatio = 800/550; //1.4545
    widthRatio = 526/362;  //1.4530
  }else if(windowWidth > 1909){
    heightRatio = 800/750; //1.0666
    widthRatio = 526/494;  //1.0647
  }
  document.pointform.form_a.value = lon[Math.round(pos_a*widthRatio)];
  document.pointform.form_b.value = lat[Math.round(pos_b*heightRatio)];
  var longitude1 = lon[Math.round(pos_a*widthRatio)];
  var latitude1 = lat[Math.round(pos_b*heightRatio)];
  var now = new Date();
  var todayStr = formatDate(now);
  var tomorrowStr = formatTomorrow(now);
  var urlAddress = latitude1 + "," + longitude1;
  var url = 'http://service.globalweathercorp.com/webservices/resources/v2/weatherdatasummary/'+
  latitude1+'/'+longitude1+'/'+todayStr+'-'+tomorrowStr+
  '?gwctoken=6EEA6EEBDDEAA461688F1B11DF66B135&format=json';
  $.getJSON(url, function (data) {
    if (data.points != null) {
     for (i = 0; i < data.points.length; i++) {
       if (data.points[i].dataType == 'tempMINIMUM') {
         document.pointform.temp_min.value = data.points[i].value;
       }else if (data.points[i].dataType == 'tempMAXIMUM') {
          document.pointform.temp_max.value = data.points[i].value;
       }else if (data.points[i].dataType == 'probprecipMAXIMUM') {
          document.pointform.precip_hour.value = data.points[i].value;
       }/*else if (data.points[i].dataType == 'windspeedAVERAGE') {
          document.pointform.wind_speed.value = data.points[i].value;
       }else if (data.points[i].dataType == 'conditionstext') {
          document.pointform.conditions.value = data.points[i].value;
       }*/
     }
   }
   $(".click-anywhere").animate({'opacity':0}, 'slow');
   $(".marker-placeholder").fadeOut(1);
   var hasMet = $('#pointer_div').hasClass('met-mode');
   if (hasMet === true) {
     document.getElementById("hi").value = ((document.getElementById("hi").value -32) * 5 / 9).toFixed(1);
     document.getElementById("lo").value = ((document.getElementById("lo").value -32) * 5 / 9).toFixed(1);
     document.getElementById("wind-spd").value = Math.round(document.getElementById('wind-spd').value*1.609344).toFixed(0);
   }
});
  var url2 = 'http://service.globalweathercorp.com/webservices/resources/v2/weatherdata/'+
  latitude1+'/'+longitude1+'/'+todayStr+'-'+tomorrowStr+
  'timeinterval={1}?gwctoken=E9F650D5CDEABE6C031EEEA0766FFC63';
  var beforeLong = new Date().getTime();
   $.getJSON(url2, function (data) {
     var afterLong = new Date().getTime();
     var serviceResponseTime = afterLong - beforeLong;
     console.log('service Response Milliseconds = ', serviceResponseTime);
     var currentTemperature = '';
     var currentConditions = '';
     var currentWindSpd = '';
     if (data == null) {
       console.log('data is null');
     }else if (data.timezoneoffset == null) {
       console.log('data.timezoneoffset is null');
     }else if (data.times == null) {
       console.log('data.times is null');
     }else {
       var suba = getSuba(data.timezoneoffset, data.times[0].validDate);
       if (isNaN(suba)) {
         console.log('suba is NaN');
       }else {
         if (data.times[suba].points == null) {
           console.log('data.times.points is null');
         }else {
           var found = 0;
           for (var subb = 0; subb < 20; subb++) {
             if (data.times[suba].points[subb].dataType == 'temp') {
               currentTemperature = data.times[suba].points[subb].value;
               found++;
               console.log(currentTemperature);
             }
             if (data.times[suba].points[subb].dataType == 'conditionstext') {
               currentConditions = data.times[suba].points[subb].value;
               found++;
               console.log(currentConditions);
             }
             if (data.times[suba].points[subb].dataType == 'windspeed') {
               currentWindSpd = data.times[suba].points[subb].value;
               found++;
               console.log(currentWindSpd);
             }
             if (found >= 3) {
               break;
             }
         }
         document.pointform.today_temp.value = currentTemperature;
         document.pointform.conditions.value = currentConditions;
         document.pointform.wind_speed.value = currentWindSpd;
      }
    }
  }
  var hasMet = $('#pointer_div').hasClass('met-mode');
  if (!hasMet) {
    console.log('hasMet is false');
  }else {
    document.getElementById("today_temp").value = ((document.getElementById("today_temp").value -32) * 5 / 9).toFixed(1);
    document.getElementById("wind-spd").value = Math.round(document.getElementById('wind-spd').value*1.609344).toFixed(0);
  }
});
var url= 'http://locationiq.org/v1/reverse.php?format=json&key=94a043beaa6058&lat='+latitude1+'&lon='+longitude1;
        $.getJSON(url, function(data) {
          if (data.display_name != null) {
            // console.log(data.display_name);
            $('.geolocation-name').html(data.display_name);
          }else if (data.display_name == null) {
            $('.geolocation-name').html('');
          }
        })
}
function getSuba(timezoneOffset, firstDateString) {
  console.log('calculating suba for ', timezoneOffset, firstDateString);
  clickDateTime = getClickDateTime(timezoneOffset);
  hours = clickDateTime.getHours();
  minutes = clickDateTime.getMinutes();
  if (minutes > 30) {
    hours++;
  }
  var arr = firstDateString.split(" ");
  var tableHours = arr[3].substring(0,2);
  var suba = 0;
  console.log('hours ', hours, ' tableHours ', tableHours)
  if (tableHours > hours) {
    suba = (24 - tableHours) + hours;
  }else {
    suba = hours - tableHours;
  }
  return suba;
}
function getClickDateTime(offset) {
  var d = new Date();

  // convert to msec
  // add local time zone offset
  // get UTC time in msec
  var utc = d.getTime() + (d.getTimezoneOffset() * 60000);

  // create new Date object for different city
  // using supplied offset
  var nd = new Date(utc + (3600000*offset));
  return nd;
}
function formatDate(now) {
  var year = now.getFullYear();
  var month = '0';
  if ((now.getMonth()) + 1 < 10) {
      month = month + (now.getMonth() + 1);
  }else {
    month = now.getMonth() + 1;
  }
  var day = '0';
  if (now.getDate() < 10) {
    day = day + now.getDate();
  }else {
    day = now.getDate();
  }
  var hour = '0';
  if (now.getHours() < 10) {
      hour = hour + now.getHours();
  }else {
    hour = now.getHours();
  }
  return String(year) + String(month) + day + 'T' + hour;
};
function formatTomorrow(now) {
  tomorrow = new Date(now.getTime() + (23*60*60*1000));
  return formatDate(tomorrow);
};

$(document).ready(function() {
  $('.convert-btn').click(function() {
    $(".convert-btn span").fadeToggle();
    $('.change').fadeToggle('imp met')
    $("#hi, #lo").toggleClass("f c");
    $("#pointer_div").toggleClass("imp-mode met-mode");
    var hasImp = $('#pointer_div').hasClass('imp-mode');
    var hasMet = $('#pointer_div').hasClass('met-mode');
    if (hasImp === true) {
      document.getElementById("hi").value = (document.getElementById("hi").value * 9 /5 + 32).toFixed(1);
      document.getElementById("lo").value = (document.getElementById("lo").value * 9 /5 + 32).toFixed(1);
      document.getElementById("today_temp").value = (document.getElementById("today_temp").value * 9 /5 + 32).toFixed(1);
      document.getElementById("wind-spd").value = Math.round(document.getElementById('wind-spd').value/1.609344).toFixed(0);
    }else if (hasMet === true) {
      document.getElementById("hi").value = ((document.getElementById("hi").value -32) * 5 / 9).toFixed(1);
      document.getElementById("lo").value = ((document.getElementById("lo").value -32) * 5 / 9).toFixed(1);
      document.getElementById("today_temp").value = ((document.getElementById("today_temp").value -32) * 5 / 9).toFixed(1);
      document.getElementById("wind-spd").value = Math.round(document.getElementById('wind-spd').value*1.609344).toFixed(0);
    }
  });
});
